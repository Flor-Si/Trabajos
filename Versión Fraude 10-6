{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Flor-Si/Trabajos/blob/main/Versi%C3%B3n%20Fraude%2010-6\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HEsVmJQi9v4b"
      },
      "source": [
        "\n",
        "\n",
        "#*Trabajo Final  detección de fraudes *"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5-dIh6-N9yew"
      },
      "source": [
        "# ***Conjuntos de datos financieros sintéticos para la detección de fraudes***\n",
        "\n",
        "PaySim simula transacciones de dinero móvil basándose en una muestra de transacciones reales extraídas de un mes de registros financieros de un servicio de dinero móvil implementado en un país africano. Los registros originales fueron proporcionados por una empresa multinacional, proveedora del servicio financiero móvil, que actualmente opera en más de 14 países de todo el mundo.\n",
        "\n",
        "Este conjunto de datos sintéticos se reduce a 1/4 del conjunto de datos original y se creó exclusivamente para Kaggle.\n",
        "\n",
        "**NOTA:** Las transacciones que se detectan como fraude se cancelan, por lo que para la detección de fraudes estas columnas (oldbalanceOrg, newbalanceOrig, oldbalanceDest ) no debe utilizarse.\n",
        "\n",
        "**Dataset:** https://www.kaggle.com/datasets/ealaxi/paysim1/data\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IvaIQqrnCj06"
      },
      "source": [
        "## ***Importación de librerias***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "P_iHZCwh9VWK"
      },
      "outputs": [],
      "source": [
        "# Importamos las librerias necesarias para la EDA\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats\n",
        "import sklearn"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iPB66IUoC0Kv"
      },
      "source": [
        "## ***Importación de la Base de Datos***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "-BxYO5gsn-72"
      },
      "outputs": [],
      "source": [
        "# Importacion a la base de datos local\n",
        "df = pd.read_csv('/content/Fraude.csv.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "D0IW34BxnsUA"
      },
      "outputs": [],
      "source": [
        "   # Importacion a la base de datos usando drive\n",
        "    # from google.colab import drive\n",
        "   #  drive.mount('/content/drive')\n",
        "  #  df = pd.read_csv('/content/drive/MyDrive/dataSetFraudes.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Olm1wBSsB7ho"
      },
      "source": [
        "## ***Analisis de Dataset***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "S4NYL7Cf7TPr",
        "outputId": "54749005-4e76-4aa2-b38c-4a438d6b6d98"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n",
              "0     1   PAYMENT   9839.64  C1231006815      170136.00       160296.36   \n",
              "1     1   PAYMENT   1864.28  C1666544295       21249.00        19384.72   \n",
              "2     1  TRANSFER    181.00  C1305486145         181.00            0.00   \n",
              "3     1  CASH_OUT    181.00   C840083671         181.00            0.00   \n",
              "4     1   PAYMENT  11668.14  C2048537720       41554.00        29885.86   \n",
              "5     1   PAYMENT   7817.71    C90045638       53860.00        46042.29   \n",
              "6     1   PAYMENT   7107.77   C154988899      183195.00       176087.23   \n",
              "7     1   PAYMENT   7861.64  C1912850431      176087.23       168225.59   \n",
              "8     1   PAYMENT   4024.36  C1265012928        2671.00            0.00   \n",
              "9     1     DEBIT   5337.77   C712410124       41720.00        36382.23   \n",
              "\n",
              "      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n",
              "0  M1979787155             0.0            0.00        0               0  \n",
              "1  M2044282225             0.0            0.00        0               0  \n",
              "2   C553264065             0.0            0.00        1               0  \n",
              "3    C38997010         21182.0            0.00        1               0  \n",
              "4  M1230701703             0.0            0.00        0               0  \n",
              "5   M573487274             0.0            0.00        0               0  \n",
              "6   M408069119             0.0            0.00        0               0  \n",
              "7   M633326333             0.0            0.00        0               0  \n",
              "8  M1176932104             0.0            0.00        0               0  \n",
              "9   C195600860         41898.0        40348.79        0               0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bb93d75-d017-483f-91a2-08147bc2031e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>nameOrig</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>nameDest</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>9839.64</td>\n",
              "      <td>C1231006815</td>\n",
              "      <td>170136.00</td>\n",
              "      <td>160296.36</td>\n",
              "      <td>M1979787155</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>1864.28</td>\n",
              "      <td>C1666544295</td>\n",
              "      <td>21249.00</td>\n",
              "      <td>19384.72</td>\n",
              "      <td>M2044282225</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>181.00</td>\n",
              "      <td>C1305486145</td>\n",
              "      <td>181.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C553264065</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>181.00</td>\n",
              "      <td>C840083671</td>\n",
              "      <td>181.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C38997010</td>\n",
              "      <td>21182.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>11668.14</td>\n",
              "      <td>C2048537720</td>\n",
              "      <td>41554.00</td>\n",
              "      <td>29885.86</td>\n",
              "      <td>M1230701703</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>7817.71</td>\n",
              "      <td>C90045638</td>\n",
              "      <td>53860.00</td>\n",
              "      <td>46042.29</td>\n",
              "      <td>M573487274</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>7107.77</td>\n",
              "      <td>C154988899</td>\n",
              "      <td>183195.00</td>\n",
              "      <td>176087.23</td>\n",
              "      <td>M408069119</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>7861.64</td>\n",
              "      <td>C1912850431</td>\n",
              "      <td>176087.23</td>\n",
              "      <td>168225.59</td>\n",
              "      <td>M633326333</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>4024.36</td>\n",
              "      <td>C1265012928</td>\n",
              "      <td>2671.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>M1176932104</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1</td>\n",
              "      <td>DEBIT</td>\n",
              "      <td>5337.77</td>\n",
              "      <td>C712410124</td>\n",
              "      <td>41720.00</td>\n",
              "      <td>36382.23</td>\n",
              "      <td>C195600860</td>\n",
              "      <td>41898.0</td>\n",
              "      <td>40348.79</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bb93d75-d017-483f-91a2-08147bc2031e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3bb93d75-d017-483f-91a2-08147bc2031e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3bb93d75-d017-483f-91a2-08147bc2031e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9c206b9a-e7c5-42a0-8b07-4c7671419abb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c206b9a-e7c5-42a0-8b07-4c7671419abb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9c206b9a-e7c5-42a0-8b07-4c7671419abb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# Analizo los datos de los primeros 10 registros\n",
        "df.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2BgbhmBJbgdQ",
        "outputId": "5ea9dad2-abc9-42e6-c259-8b78a0ad8726"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6362620 entries, 0 to 6362619\n",
            "Data columns (total 11 columns):\n",
            " #   Column          Dtype  \n",
            "---  ------          -----  \n",
            " 0   step            int64  \n",
            " 1   type            object \n",
            " 2   amount          float64\n",
            " 3   nameOrig        object \n",
            " 4   oldbalanceOrg   float64\n",
            " 5   newbalanceOrig  float64\n",
            " 6   nameDest        object \n",
            " 7   oldbalanceDest  float64\n",
            " 8   newbalanceDest  float64\n",
            " 9   isFraud         int64  \n",
            " 10  isFlaggedFraud  int64  \n",
            "dtypes: float64(5), int64(3), object(3)\n",
            "memory usage: 534.0+ MB\n"
          ]
        }
      ],
      "source": [
        "# informacion de dataframe columas y tipo de datos\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UXDKXlKIf_mx",
        "outputId": "9583c642-2bd2-4d4e-ee36-3c7fcbf7b7e2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['PAYMENT', 'TRANSFER', 'CASH_OUT', 'DEBIT', 'CASH_IN'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df['type'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "_7eBtIt-VDaL",
        "outputId": "6f2c3a2a-b792-4af0-e131-85dd0bc5cde8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "step              0\n",
              "type              0\n",
              "amount            0\n",
              "nameOrig          0\n",
              "oldbalanceOrg     0\n",
              "newbalanceOrig    0\n",
              "nameDest          0\n",
              "oldbalanceDest    0\n",
              "newbalanceDest    0\n",
              "isFraud           0\n",
              "isFlaggedFraud    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>step</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>amount</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nameOrig</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nameDest</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>newbalanceDest</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isFraud</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "#Reviso los nulos\n",
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-fqUQ9RARhXU"
      },
      "source": [
        "### En este dataset NO hay nulos debido a que la informacion es la muestra de transacciones reales"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5yLBCaJOAn27",
        "outputId": "3b73e798-181b-4c06-ff98-ed1ff46ff810"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6362620, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "# Analizo la cantidad de filas y columnas\n",
        "\n",
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s9ArX9XxDJsL"
      },
      "source": [
        "### Tengo:\n",
        "- Filas: 6362620\n",
        "- Columnas: 11\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ztsj4GMeBiL9",
        "outputId": "d44eeabb-f150-440e-d82f-18c09c6962a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre de las columnas\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['step', 'type', 'amount', 'nameOrig', 'oldbalanceOrg', 'newbalanceOrig',\n",
              "       'nameDest', 'oldbalanceDest', 'newbalanceDest', 'isFraud',\n",
              "       'isFlaggedFraud'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "# Nombre de las columnas\n",
        "print('Nombre de las columnas')\n",
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Esta es la operación de transposición, que intercambia las filas y columnas del DataFrame resultante.\n",
        "#Esto facilita la lectura de las estadísticas cuando hay muchas columnas\n",
        "#Transponer estadísticas de resumen con.T\n",
        "df.describe().T.round(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "ZMazLnYBbcmk",
        "outputId": "06f04465-f0da-47a7-91b1-5aeee5bf1970"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    count        mean         std  min       25%        50%  \\\n",
              "step            6362620.0      243.40      142.33  1.0    156.00     239.00   \n",
              "amount          6362620.0   179861.90   603858.23  0.0  13389.57   74871.94   \n",
              "oldbalanceOrg   6362620.0   833883.10  2888242.67  0.0      0.00   14208.00   \n",
              "newbalanceOrig  6362620.0   855113.67  2924048.50  0.0      0.00       0.00   \n",
              "oldbalanceDest  6362620.0  1100701.67  3399180.11  0.0      0.00  132705.66   \n",
              "newbalanceDest  6362620.0  1224996.40  3674128.94  0.0      0.00  214661.44   \n",
              "isFraud         6362620.0        0.00        0.04  0.0      0.00       0.00   \n",
              "isFlaggedFraud  6362620.0        0.00        0.00  0.0      0.00       0.00   \n",
              "\n",
              "                       75%           max  \n",
              "step                335.00  7.430000e+02  \n",
              "amount           208721.48  9.244552e+07  \n",
              "oldbalanceOrg    107315.18  5.958504e+07  \n",
              "newbalanceOrig   144258.41  4.958504e+07  \n",
              "oldbalanceDest   943036.71  3.560159e+08  \n",
              "newbalanceDest  1111909.25  3.561793e+08  \n",
              "isFraud               0.00  1.000000e+00  \n",
              "isFlaggedFraud        0.00  1.000000e+00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-85d0d6dc-3875-4123-b718-2da1198d951a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>step</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>243.40</td>\n",
              "      <td>142.33</td>\n",
              "      <td>1.0</td>\n",
              "      <td>156.00</td>\n",
              "      <td>239.00</td>\n",
              "      <td>335.00</td>\n",
              "      <td>7.430000e+02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>amount</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>179861.90</td>\n",
              "      <td>603858.23</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13389.57</td>\n",
              "      <td>74871.94</td>\n",
              "      <td>208721.48</td>\n",
              "      <td>9.244552e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>833883.10</td>\n",
              "      <td>2888242.67</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>14208.00</td>\n",
              "      <td>107315.18</td>\n",
              "      <td>5.958504e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>855113.67</td>\n",
              "      <td>2924048.50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>144258.41</td>\n",
              "      <td>4.958504e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>1100701.67</td>\n",
              "      <td>3399180.11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>132705.66</td>\n",
              "      <td>943036.71</td>\n",
              "      <td>3.560159e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>newbalanceDest</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>1224996.40</td>\n",
              "      <td>3674128.94</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>214661.44</td>\n",
              "      <td>1111909.25</td>\n",
              "      <td>3.561793e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isFraud</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <td>6362620.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85d0d6dc-3875-4123-b718-2da1198d951a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-85d0d6dc-3875-4123-b718-2da1198d951a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-85d0d6dc-3875-4123-b718-2da1198d951a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-074a3839-4957-419d-befc-00aaf74b4e31\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-074a3839-4957-419d-befc-00aaf74b4e31')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-074a3839-4957-419d-befc-00aaf74b4e31 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 6362620.0,\n        \"max\": 6362620.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6362620.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 530706.7518127387,\n        \"min\": 0.0,\n        \"max\": 1224996.4,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          243.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1671788.2955495205,\n        \"min\": 0.0,\n        \"max\": 3674128.94,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          603858.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3535533905932738,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4726.363937029751,\n        \"min\": 0.0,\n        \"max\": 13389.57,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          156.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 80765.28657775886,\n        \"min\": 0.0,\n        \"max\": 214661.44,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          239.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 448893.3816233805,\n        \"min\": 0.0,\n        \"max\": 1111909.25,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          335.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 152963480.4169497,\n        \"min\": 1.0,\n        \"max\": 356179278.92,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          743.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_abgTGtqdi_3"
      },
      "source": [
        "## **Explicación de cabeceras**\n",
        "\n",
        "Esta es una muestra de 1 fila con explicación de cabeceras:\n",
        "\n",
        "1,PAYMENT,1060.31,C429214117,1089.089,28.69,M1591654462,0.0,0,0\n",
        "\n",
        "**step:** *mapea una unidad de tiempo en el mundo real. En este caso 1 step es 1 hora de tiempo. Pasos totales 744 (31 días de simulación).*\n",
        "\n",
        "**type:** CASH-IN, CASH-OUT, DEBIT, PAYMENT y TRANSFER.\n",
        "\n",
        "**amount:** *cantidad de la transacción en moneda local.*\n",
        "\n",
        "**nameOrig:** *cliente que inició la transacción*\n",
        "\n",
        "**oldbalanceOrg**: *saldo inicial antes de la transacción*\n",
        "\n",
        "**newbalanceOrig:** *nuevo saldo después de la transacción.*\n",
        "\n",
        "**nameDest:** *cliente que es el destinatario de la transacción*\n",
        "\n",
        "**oldbalanceDest:** *receptor inicial de saldo antes de la transacción. Tenga en cuenta que no hay información para los clientes que comiencen con M (Merchants).*\n",
        "\n",
        "**newbalanceDest:** *nuevo receptor de saldo después de la transacción. Tenga en cuenta que no hay información para los clientes que comiencen con M (Merchants).*\n",
        "\n",
        "**isFraud:** *Estas son las transacciones realizadas por los agentes fraudulentos dentro de la simulación. En este conjunto de datos específico el comportamiento fraudulento de los agentes pretende beneficiarse tomando el control o las cuentas de los clientes y tratar de vaciar los fondos transfiriendo a otra cuenta y luego sacar el dinero del sistema.*\n",
        "\n",
        "**isFlaggedFraud:** *El modelo de negocio tiene como objetivo controlar las transferencias masivas de una cuenta a otra y marca intentos ilegales. Un intento ilegal en este conjunto de datos es un intento de transferir más de 200.000 en una sola transacción.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u3ve9uSoFoN7"
      },
      "source": [
        "\n",
        "# ⚠️ IMPORTANTE ⚠️\n",
        "**Como en las transacciones fraudulentas se cancelan los movimientos, ningún valor de balance es confiable para predecir el fraude, ya que fue alterado por el simulador despues de la detección del fraude.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "ElRAWg5MGrDw",
        "outputId": "14de0ebb-04b2-4c9b-a0d0-2e7242ba4ebe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         step      type      amount     nameOrig     nameDest  isFraud  \\\n",
              "0           1   PAYMENT     9839.64  C1231006815  M1979787155        0   \n",
              "1           1   PAYMENT     1864.28  C1666544295  M2044282225        0   \n",
              "2           1  TRANSFER      181.00  C1305486145   C553264065        1   \n",
              "3           1  CASH_OUT      181.00   C840083671    C38997010        1   \n",
              "4           1   PAYMENT    11668.14  C2048537720  M1230701703        0   \n",
              "...       ...       ...         ...          ...          ...      ...   \n",
              "6362615   743  CASH_OUT   339682.13   C786484425   C776919290        1   \n",
              "6362616   743  TRANSFER  6311409.28  C1529008245  C1881841831        1   \n",
              "6362617   743  CASH_OUT  6311409.28  C1162922333  C1365125890        1   \n",
              "6362618   743  TRANSFER   850002.52  C1685995037  C2080388513        1   \n",
              "6362619   743  CASH_OUT   850002.52  C1280323807   C873221189        1   \n",
              "\n",
              "         isFlaggedFraud  \n",
              "0                     0  \n",
              "1                     0  \n",
              "2                     0  \n",
              "3                     0  \n",
              "4                     0  \n",
              "...                 ...  \n",
              "6362615               0  \n",
              "6362616               0  \n",
              "6362617               0  \n",
              "6362618               0  \n",
              "6362619               0  \n",
              "\n",
              "[6362620 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2763856c-b665-4aa6-8d2e-d93e16b4b545\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>nameOrig</th>\n",
              "      <th>nameDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>9839.64</td>\n",
              "      <td>C1231006815</td>\n",
              "      <td>M1979787155</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>1864.28</td>\n",
              "      <td>C1666544295</td>\n",
              "      <td>M2044282225</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>181.00</td>\n",
              "      <td>C1305486145</td>\n",
              "      <td>C553264065</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>181.00</td>\n",
              "      <td>C840083671</td>\n",
              "      <td>C38997010</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>11668.14</td>\n",
              "      <td>C2048537720</td>\n",
              "      <td>M1230701703</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362615</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>339682.13</td>\n",
              "      <td>C786484425</td>\n",
              "      <td>C776919290</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362616</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1529008245</td>\n",
              "      <td>C1881841831</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362617</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1162922333</td>\n",
              "      <td>C1365125890</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362618</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1685995037</td>\n",
              "      <td>C2080388513</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362619</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1280323807</td>\n",
              "      <td>C873221189</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6362620 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2763856c-b665-4aa6-8d2e-d93e16b4b545')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2763856c-b665-4aa6-8d2e-d93e16b4b545 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2763856c-b665-4aa6-8d2e-d93e16b4b545');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-64a831d2-9ffb-465e-aa83-468d8d05b3a4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-64a831d2-9ffb-465e-aa83-468d8d05b3a4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-64a831d2-9ffb-465e-aa83-468d8d05b3a4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ecb6aa30-18f5-42ef-9885-b013e52544a1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_mod')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ecb6aa30-18f5-42ef-9885-b013e52544a1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_mod');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_mod"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "# Vamos a eliminar todas las columnas de balance\n",
        "\n",
        "df_mod = df.drop(['oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest'], axis=1)\n",
        "df_mod"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "fjxT4YA9Igxz",
        "outputId": "7fae902a-1f76-4212-cb28-6bec3b185613"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "isFraud\n",
              "0    99.87\n",
              "1     0.13\n",
              "Name: proportion, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>proportion</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isFraud</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>99.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "# Analizó la variable Fraude\n",
        "# Calcula el porcentaje de casos de fraude y no fraude\n",
        "porcentaje_fraude=df_mod['isFraud'].value_counts(normalize=True)*100\n",
        "\n",
        "porcentaje_fraude.round(2)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "EVVtcaPWSaRR",
        "outputId": "1be60004-6f67-4add-c2f5-6b99c16d5709"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Grafica por tipo y fraude\n",
        "sns.countplot(data=df_mod, x='type', hue='isFraud')\n",
        "plt.title(\"Transacciones por tipo y si son fraude o no\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "px4tAVZjMT9y"
      },
      "source": [
        "### Detectamos que hay un desbalance considerable entre lo que esta etiquetado como\n",
        "- 1 = Fraude\n",
        "- 0 = No Fraude"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "5PaNvwaTLTz0",
        "outputId": "8e411209-baf8-449b-c701-2bfde85a8b97"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "type\n",
              "CASH_OUT    2237500\n",
              "PAYMENT     2151495\n",
              "CASH_IN     1399284\n",
              "TRANSFER     532909\n",
              "DEBIT         41432\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>CASH_OUT</th>\n",
              "      <td>2237500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAYMENT</th>\n",
              "      <td>2151495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CASH_IN</th>\n",
              "      <td>1399284</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TRANSFER</th>\n",
              "      <td>532909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEBIT</th>\n",
              "      <td>41432</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "# Verificamos los tipos de transacción\n",
        "\n",
        "df_mod['type'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Porcentaje de  cada tipo tipo de transcción\n",
        "porcentaje_tipo_transaccion = df_mod['type'].value_counts(normalize=True) * 100\n",
        "\n",
        "print(\"Porcentaje de cada tipo de transacción:\")\n",
        "print(porcentaje_tipo_transaccion.round(2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hf97jCtzruZt",
        "outputId": "56d29d3f-8fc6-4787-d3ea-e40f3a738252"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Porcentaje de cada tipo de transacción:\n",
            "type\n",
            "CASH_OUT    35.17\n",
            "PAYMENT     33.81\n",
            "CASH_IN     21.99\n",
            "TRANSFER     8.38\n",
            "DEBIT        0.65\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#grafico de torta del porcentajde de typo de transaccion con seaborn\n",
        "\n",
        "# Crear el gráfico de torta\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.pie(porcentaje_tipo_transaccion, labels=porcentaje_tipo_transaccion.index, autopct='%1.1f%%', startangle=140)\n",
        "plt.title('Porcentaje de cada tipo de transacción')\n",
        "plt.axis('equal')  # Asegura que el gráfico de torta sea un círculo.\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "DXTYyQ_xs2zq",
        "outputId": "9fcb0f31-1340-46ff-bd89-8215bbb1fd58"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f5YuXYNzON8D",
        "outputId": "758eb277-53b9-483c-daa4-49e60796ec18"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "type\n",
            "TRANSFER    0.007688\n",
            "CASH_OUT    0.001840\n",
            "CASH_IN     0.000000\n",
            "DEBIT       0.000000\n",
            "PAYMENT     0.000000\n",
            "Name: isFraud, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "# Filtramos fraude por tipo de transacción\n",
        "fraude_tipo_porcentaje = df_mod.groupby('type')['isFraud'].mean().sort_values(ascending=False)\n",
        "print(fraude_tipo_porcentaje)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t3wlW6ERQ3Jt"
      },
      "source": [
        "### Vemos que los fraudes estan concentrados en 2 tipos de transacciones\n",
        "- TRANSFER =   0.007688\n",
        "- CASH_OUT =   0.001840\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "evsWeQ6kTW4A"
      },
      "source": [
        "### Cuento la cantidad de transacciones fraudulentas que tienen estos 2 tipos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XV_UPAS4P0-u",
        "outputId": "13e538fd-b5fa-4e23-a6ba-4d95f74ba13f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "type\n",
            "CASH_OUT    4116\n",
            "TRANSFER    4097\n",
            "Name: isFraud, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#: porcentaje de fraude\n",
        "# Cuento la cantidad de transacciones fraudulentas que tienen estos 2 tipos\n",
        "\n",
        "fraude_x_tipo = df_mod[df_mod['isFraud'] == 1].groupby('type')['isFraud'].count().sort_values(ascending=False)\n",
        "print(fraude_x_tipo)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Comparo con las transacciones que no son fraude"
      ],
      "metadata": {
        "id": "YJATbQ3HL1Fd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "No_fraude_x_tipo = df_mod[df_mod['isFraud'] == 0].groupby('type')['isFraud'].count().sort_values(ascending=False)\n",
        "print(No_fraude_x_tipo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZGNuKo14LzqR",
        "outputId": "cd0ea871-6349-4da0-e5b5-b2b8da0d66b2"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "type\n",
            "CASH_OUT    2233384\n",
            "PAYMENT     2151495\n",
            "CASH_IN     1399284\n",
            "TRANSFER     528812\n",
            "DEBIT         41432\n",
            "Name: isFraud, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7r_ZmY_YTx5w"
      },
      "source": [
        "### Vamos a confirmar ésto graficamente"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "xMQPl8WMUDEX",
        "outputId": "3264e489-88a2-49a1-d3cf-25196911d8a9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-24-2021134629>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=fraude_x_tipo.values, y=fraude_x_tipo.index, palette='Reds_r')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(6, 4))\n",
        "sns.barplot(x=fraude_x_tipo.values, y=fraude_x_tipo.index, palette='Reds_r')\n",
        "\n",
        "# Quitar recuadro superior y derecho\n",
        "ax = plt.gca()\n",
        "ax.spines['top'].set_visible(False)\n",
        "ax.spines['right'].set_visible(False)\n",
        "\n",
        "# Añadir etiquetas\n",
        "for i, v in enumerate(fraude_x_tipo.values):\n",
        "    plt.text(v + 1, i, str(v), color='black', va='center', fontweight='bold')\n",
        "\n",
        "plt.title('Cantidad de fraudes por tipo de transacción')\n",
        "#plt.xlabel('Cantidad de fraudes')\n",
        "plt.grid(axis='x', linestyle='--', alpha=0.4)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "oVgfGzX2QuNi",
        "outputId": "cbaaf3ac-ccf2-4943-8d02-5379097df574"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "isFraud\n",
              "0     178197.04\n",
              "1    1467967.30\n",
              "Name: amount, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>amount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isFraud</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>178197.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1467967.30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "# Analizo la diferencia de los montos que hay \"con fraude\" y \"sin fraude\"\n",
        "df_mod.groupby('isFraud')['amount'].mean().round(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "0Kdyp8EAT4FA",
        "outputId": "70e47b78-8b8c-44ce-fc93-0963e1d497b1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Grafico de Disribucion de montos con fraude y sin Fraude\n",
        "\n",
        "sns.kdeplot(data=df_mod[df_mod['isFraud'] == 0], x='amount', label='No Fraud', fill=True)\n",
        "sns.kdeplot(data=df_mod[df_mod['isFraud'] == 1], x='amount', label='Fraud', fill=True)\n",
        "plt.xlim(0, df_mod['amount'].quantile(0.99))  # evitamos top 1% para verlo más expandido al grafico\n",
        "plt.title(\"Distribución del monto con fraude y sin Fraude\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E6_WWMagkSX1"
      },
      "source": [
        "### En relación al tiempo voy a analizar por dia como:\n",
        "- 1 step= 1 dia\n",
        "### voy a agregar una columna dia a un nuevo dataframe para ver en lapso de dias cuando hay más fraude"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gBFG_in2X6jL",
        "outputId": "0c17b585-840b-4b18-d803-5cee989972d8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         step      type      amount     nameOrig     nameDest  isFraud  \\\n",
              "6362615   743  CASH_OUT   339682.13   C786484425   C776919290        1   \n",
              "6362616   743  TRANSFER  6311409.28  C1529008245  C1881841831        1   \n",
              "6362617   743  CASH_OUT  6311409.28  C1162922333  C1365125890        1   \n",
              "6362618   743  TRANSFER   850002.52  C1685995037  C2080388513        1   \n",
              "6362619   743  CASH_OUT   850002.52  C1280323807   C873221189        1   \n",
              "\n",
              "         isFlaggedFraud  dia  \n",
              "6362615               0   31  \n",
              "6362616               0   31  \n",
              "6362617               0   31  \n",
              "6362618               0   31  \n",
              "6362619               0   31  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd179759-970f-4c7c-bc9c-40a9d2af41a9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>nameOrig</th>\n",
              "      <th>nameDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <th>dia</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6362615</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>339682.13</td>\n",
              "      <td>C786484425</td>\n",
              "      <td>C776919290</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362616</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1529008245</td>\n",
              "      <td>C1881841831</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362617</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1162922333</td>\n",
              "      <td>C1365125890</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362618</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1685995037</td>\n",
              "      <td>C2080388513</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362619</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1280323807</td>\n",
              "      <td>C873221189</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd179759-970f-4c7c-bc9c-40a9d2af41a9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fd179759-970f-4c7c-bc9c-40a9d2af41a9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fd179759-970f-4c7c-bc9c-40a9d2af41a9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-120676f7-4ef9-4119-a7df-8ae9b93f403e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-120676f7-4ef9-4119-a7df-8ae9b93f403e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-120676f7-4ef9-4119-a7df-8ae9b93f403e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_mod_col\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"step\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 743,\n        \"max\": 743,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          743\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"TRANSFER\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3091534.888220482,\n        \"min\": 339682.13,\n        \"max\": 6311409.28,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          339682.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nameOrig\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"C1529008245\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nameDest\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"C1881841831\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFlaggedFraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 31,\n        \"max\": 31,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "# CReo copia\n",
        "df_mod_col = df_mod.copy()\n",
        "\n",
        "# Crear columna 'dia' condicionalmente para graficar\n",
        "df_mod_col['dia'] = df_mod_col.apply(lambda row: round(row['step'] / 24, 0) if row['isFraud'] == 1 else 0, axis=1).astype(int)\n",
        "\n",
        "df_mod_col.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "oSGOaNHad683",
        "outputId": "f7d42e4e-7f14-4397-90da-7816909f859e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='isFraud', ylabel='dia'>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "sns.boxplot(x= df_mod_col['isFraud'],y=df_mod_col['dia'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S3UGBjvVihUU"
      },
      "source": [
        "### Aproximadamente del dia 7 al 23 es donde se concentran los fraudes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lwYwGGpqgfPW"
      },
      "source": [
        "### *Hago una revision por rango de días y monto*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "7qLttWTEjRt4",
        "outputId": "c8136034-3b73-4eac-828c-d78076becf47"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-29-1459672709>:12: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  .groupby('rango_dia')['amount']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  rango_dia  monto_fraude\n",
              "0       1-5  1.775091e+09\n",
              "1      6-10  1.931750e+09\n",
              "2     11-15  1.892609e+09\n",
              "3     16-20  2.198885e+09\n",
              "4     21-25  1.643760e+09\n",
              "5     26-31  2.528988e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dade0b62-82e3-4e63-bb01-e81543e8724f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rango_dia</th>\n",
              "      <th>monto_fraude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1-5</td>\n",
              "      <td>1.775091e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6-10</td>\n",
              "      <td>1.931750e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>11-15</td>\n",
              "      <td>1.892609e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16-20</td>\n",
              "      <td>2.198885e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>21-25</td>\n",
              "      <td>1.643760e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>26-31</td>\n",
              "      <td>2.528988e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dade0b62-82e3-4e63-bb01-e81543e8724f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dade0b62-82e3-4e63-bb01-e81543e8724f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dade0b62-82e3-4e63-bb01-e81543e8724f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ea09c1be-de45-4dcb-bcc1-3bd39a1d74e0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea09c1be-de45-4dcb-bcc1-3bd39a1d74e0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ea09c1be-de45-4dcb-bcc1-3bd39a1d74e0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_54d6b108-c6f0-4e32-ade9-9adc3ea4da90\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('fraudes_por_rango')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_54d6b108-c6f0-4e32-ade9-9adc3ea4da90 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('fraudes_por_rango');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "fraudes_por_rango",
              "summary": "{\n  \"name\": \"fraudes_por_rango\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"rango_dia\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"1-5\",\n          \"6-10\",\n          \"26-31\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"monto_fraude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320289399.81809866,\n        \"min\": 1643759824.36,\n        \"max\": 2528988037.7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1775090674.76,\n          1931749702.42,\n          2528988037.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "df_prueba = df_mod_col.copy()\n",
        "bins = [0, 5, 10, 15, 20, 25, 31]\n",
        "labels = ['1-5', '6-10', '11-15', '16-20', '21-25', '26-31']\n",
        "\n",
        "# Paso 2: Crear columna 'rango_dia' con pd.cut()\n",
        "df_prueba['rango_dia'] = pd.cut(df_prueba['dia'], bins=bins, labels=labels, right=True)\n",
        "\n",
        "\n",
        "\n",
        "fraudes_por_rango = (\n",
        "    df_prueba[df_prueba['isFraud'] == 1]\n",
        "    .groupby('rango_dia')['amount']\n",
        "    .sum()\n",
        "    .reset_index(name='monto_fraude')\n",
        ")\n",
        "\n",
        "fraudes_por_rango\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "w4P2soGMXrv2",
        "outputId": "5c9a5e5b-c0d3-4029-8162-661ebbb20f6b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(data=fraudes_por_rango, x='rango_dia', y='monto_fraude', color='tomato')\n",
        "\n",
        "plt.title('Monto total de fraudes por rango de días', fontsize=14)\n",
        "plt.xlabel('Rango de días')\n",
        "plt.ylabel('Monto total de fraude')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "2SibupDs7Y3P",
        "outputId": "f7295b2e-1956-4a16-cba0-7f22b2db3930"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(8, 5))\n",
        "sns.lineplot(data=fraudes_por_rango, x='rango_dia', y='monto_fraude', marker='o', color='steelblue')\n",
        "\n",
        "plt.title('Evolución del monto de fraude por días', fontsize=14)\n",
        "plt.xlabel('Rango de días')\n",
        "plt.ylabel('Monto de fraude')\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "N69ty2VDjVLo"
      },
      "outputs": [],
      "source": [
        "cont_fraudes = (\n",
        "    df_prueba[df_prueba['isFraud'] == 1]\n",
        "    .groupby('rango_dia', observed=True)\n",
        "    .size()\n",
        "    .reset_index(name='cantidad_fraudes')\n",
        ")\n",
        "\n",
        "# Combinamos con el monto\n",
        "fraudes_df = pd.merge(fraudes_por_rango, cont_fraudes, on='rango_dia')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "9QfIJ-mLjWTP",
        "outputId": "2d4d5587-e7f4-4b5f-fa1b-fc2aeb120c8a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig, ax1 = plt.subplots(figsize=(8, 5))\n",
        "\n",
        "sns.barplot(data=fraudes_df, x='rango_dia', y='monto_fraude', color='coral', ax=ax1)\n",
        "ax1.set_ylabel('Monto de fraude', color='coral')\n",
        "ax1.tick_params(axis='y', labelcolor='coral')\n",
        "\n",
        "# Eje secundario para cantidad\n",
        "ax2 = ax1.twinx()\n",
        "sns.lineplot(data=fraudes_df, x='rango_dia', y='cantidad_fraudes', marker='o', color='blue', ax=ax2)\n",
        "ax2.set_ylabel('Cantidad de fraudes', color='blue')\n",
        "ax2.tick_params(axis='y', labelcolor='blue')\n",
        "\n",
        "plt.title('Monto y cantidad de fraudes por rango de días')\n",
        "plt.xlabel('Rango de días')\n",
        "plt.grid(True, axis='y', linestyle='--', alpha=0.4)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eJzuke_tmE9L"
      },
      "source": [
        "### Para que me quede mas claro voy a ver por dia la cantidad de fraudes y los montos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "Iwa8JrANmEcz"
      },
      "outputs": [],
      "source": [
        "# Filtramos solo los fraudes\n",
        "df_only_fraude = df_mod_col[df_mod_col['isFraud'] == 1]\n",
        "\n",
        "# Agrupar por día\n",
        "fraude_agrupado = (\n",
        "    df_only_fraude.groupby('dia')\n",
        "    .agg(monto_total=('amount', 'sum'), cantidad=('step', 'count'))\n",
        "    .reset_index()\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "zdgk2c4zm44z",
        "outputId": "13981cf4-daa6-465c-d57d-da2e4d4f3f7c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig, axes = plt.subplots(2, 1, figsize=(10, 8), sharex=True)\n",
        "\n",
        "# Monto total por día\n",
        "sns.barplot(ax=axes[0], x='dia', y='monto_total', data=fraude_agrupado, color='coral')\n",
        "axes[0].set_ylabel('Monto total')\n",
        "axes[0].set_title('Monto total de fraudes por día')\n",
        "\n",
        "# Cantidad de fraudes por día\n",
        "sns.lineplot(ax=axes[1], x='dia', y='cantidad', data=fraude_agrupado, marker='o', color='navy')\n",
        "axes[1].set_ylabel('Cantidad de fraudes')\n",
        "axes[1].set_title('Cantidad de fraudes por día')\n",
        "axes[1].set_xlabel('Día del mes')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mzbdOEyIsSXR"
      },
      "source": [
        "### Verifico si hay algun rango horario que suceda más fraude"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "5auOdIZ2sR1Z",
        "outputId": "a916c582-e136-4486-f12b-42c102b4287d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         step      type      amount     nameOrig     nameDest  isFraud  \\\n",
              "6362605   742  CASH_OUT    54652.46    C43545501   C830041824        1   \n",
              "6362606   742  TRANSFER   303846.74   C959102961   C114421319        1   \n",
              "6362607   742  CASH_OUT   303846.74  C1148860488   C846260566        1   \n",
              "6362608   742  TRANSFER   258355.42  C1226129332  C1744173808        1   \n",
              "6362609   742  CASH_OUT   258355.42  C1113162093   C797688696        1   \n",
              "6362610   742  TRANSFER    63416.99   C778071008  C1812552860        1   \n",
              "6362611   742  CASH_OUT    63416.99   C994950684  C1662241365        1   \n",
              "6362612   743  TRANSFER  1258818.82  C1531301470  C1470998563        1   \n",
              "6362613   743  CASH_OUT  1258818.82  C1436118706  C1240760502        1   \n",
              "6362614   743  TRANSFER   339682.13  C2013999242  C1850423904        1   \n",
              "6362615   743  CASH_OUT   339682.13   C786484425   C776919290        1   \n",
              "6362616   743  TRANSFER  6311409.28  C1529008245  C1881841831        1   \n",
              "6362617   743  CASH_OUT  6311409.28  C1162922333  C1365125890        1   \n",
              "6362618   743  TRANSFER   850002.52  C1685995037  C2080388513        1   \n",
              "6362619   743  CASH_OUT   850002.52  C1280323807   C873221189        1   \n",
              "\n",
              "         isFlaggedFraud  dia  hora  \n",
              "6362605               0   31    22  \n",
              "6362606               0   31    22  \n",
              "6362607               0   31    22  \n",
              "6362608               0   31    22  \n",
              "6362609               0   31    22  \n",
              "6362610               0   31    22  \n",
              "6362611               0   31    22  \n",
              "6362612               0   31    23  \n",
              "6362613               0   31    23  \n",
              "6362614               0   31    23  \n",
              "6362615               0   31    23  \n",
              "6362616               0   31    23  \n",
              "6362617               0   31    23  \n",
              "6362618               0   31    23  \n",
              "6362619               0   31    23  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-632f8311-c3f0-451c-ac58-a2f6a65f746e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>nameOrig</th>\n",
              "      <th>nameDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <th>dia</th>\n",
              "      <th>hora</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6362605</th>\n",
              "      <td>742</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>54652.46</td>\n",
              "      <td>C43545501</td>\n",
              "      <td>C830041824</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362606</th>\n",
              "      <td>742</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>303846.74</td>\n",
              "      <td>C959102961</td>\n",
              "      <td>C114421319</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362607</th>\n",
              "      <td>742</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>303846.74</td>\n",
              "      <td>C1148860488</td>\n",
              "      <td>C846260566</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362608</th>\n",
              "      <td>742</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>258355.42</td>\n",
              "      <td>C1226129332</td>\n",
              "      <td>C1744173808</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362609</th>\n",
              "      <td>742</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>258355.42</td>\n",
              "      <td>C1113162093</td>\n",
              "      <td>C797688696</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362610</th>\n",
              "      <td>742</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>63416.99</td>\n",
              "      <td>C778071008</td>\n",
              "      <td>C1812552860</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362611</th>\n",
              "      <td>742</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>63416.99</td>\n",
              "      <td>C994950684</td>\n",
              "      <td>C1662241365</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362612</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>1258818.82</td>\n",
              "      <td>C1531301470</td>\n",
              "      <td>C1470998563</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362613</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>1258818.82</td>\n",
              "      <td>C1436118706</td>\n",
              "      <td>C1240760502</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362614</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>339682.13</td>\n",
              "      <td>C2013999242</td>\n",
              "      <td>C1850423904</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362615</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>339682.13</td>\n",
              "      <td>C786484425</td>\n",
              "      <td>C776919290</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362616</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1529008245</td>\n",
              "      <td>C1881841831</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362617</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1162922333</td>\n",
              "      <td>C1365125890</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362618</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1685995037</td>\n",
              "      <td>C2080388513</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362619</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1280323807</td>\n",
              "      <td>C873221189</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-632f8311-c3f0-451c-ac58-a2f6a65f746e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-632f8311-c3f0-451c-ac58-a2f6a65f746e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-632f8311-c3f0-451c-ac58-a2f6a65f746e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a8b86cc5-3cfd-4098-b94e-b25427cd8ac1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8b86cc5-3cfd-4098-b94e-b25427cd8ac1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a8b86cc5-3cfd-4098-b94e-b25427cd8ac1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_mod_col\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"step\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 742,\n        \"max\": 743,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          743,\n          742\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"TRANSFER\",\n          \"CASH_OUT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2091048.9253027241,\n        \"min\": 54652.46,\n        \"max\": 6311409.28,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          303846.74,\n          339682.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nameOrig\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"C2013999242\",\n          \"C1529008245\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nameDest\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"C1850423904\",\n          \"C1881841831\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFlaggedFraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 31,\n        \"max\": 31,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hora\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 22,\n        \"max\": 23,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "# Como el dia tiene 24hs voy a crear una columna que tenga los mismos horarios pero de distintos dias\n",
        "df_mod_col['hora'] = (df_mod_col['step'] % 24).astype(int)\n",
        "df_mod_col.tail(15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "_vSpw2_1y5Oa"
      },
      "outputs": [],
      "source": [
        "# Filtramos solo los fraudes\n",
        "df_only_fraude = df_mod_col[df_mod_col['isFraud'] == 1]\n",
        "# Agrupamos por hora\n",
        "fraude_por_hora = (\n",
        "    df_only_fraude.groupby('hora')\n",
        "    .agg(cantidad_fraudes=('amount', 'count'), monto_total=('amount', 'sum'))\n",
        "    .reset_index()\n",
        ")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "WMrxEQdMzhhg",
        "outputId": "feed9a0a-0be0-40db-d530-b9616c8bc46d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(12, 6))\n",
        "ax1 = sns.barplot(x='hora', y='monto_total', data=fraude_por_hora, color='coral')\n",
        "\n",
        "# Eje secundario para cantidad de fraudes\n",
        "ax2 = ax1.twinx()\n",
        "sns.lineplot(x='hora', y='cantidad_fraudes', data=fraude_por_hora, marker='o', color='steelblue', ax=ax2)\n",
        "\n",
        "# Etiquetas\n",
        "ax1.set_xlabel('Hora del día')\n",
        "ax1.set_ylabel('Monto total de fraudes', color='coral')\n",
        "ax2.set_ylabel('Cantidad de fraudes', color='steelblue')\n",
        "plt.title('Fraudes por hora del día: Monto y Cantidad')\n",
        "\n",
        "# Mejoras estéticas\n",
        "ax1.tick_params(axis='y', labelcolor='coral')\n",
        "ax2.tick_params(axis='y', labelcolor='steelblue')\n",
        "ax1.grid(True, axis='y', linestyle='--', alpha=0.5)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ayTnWY4P7Mtz"
      },
      "source": [
        "### Los fraudes ocurren todo el día aunque las horas más criticas por monto son:\n",
        "- 2\n",
        "- 3\n",
        "- 8\n",
        "- 10\n",
        "- 14\n",
        "- 21\n",
        "- 22\n",
        "\n",
        "### La cantidad varia entre el dia:\n",
        "- 1 a 2\n",
        "- 5 a 10\n",
        "- 13 a 22"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jlGjbpXJ9hgm"
      },
      "source": [
        "----------------\n",
        "### Con esta informacion vamos a visualizar como se distribuyen los fraudes en dia y horario"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "StveP2oX9z2n"
      },
      "outputs": [],
      "source": [
        "# Heatmap de monto total de fraudes por día y hora\n",
        "pivot_monto = df_only_fraude.pivot_table(\n",
        "    index='dia',\n",
        "    columns='hora',\n",
        "    values='amount',\n",
        "    aggfunc='sum',\n",
        "    fill_value=0\n",
        ")\n",
        "\n",
        "# Hacemos uno por cantidad:\n",
        "pivot_cantidad = df_only_fraude.pivot_table(\n",
        "    index='dia',\n",
        "    columns='hora',\n",
        "    values='isFraud',\n",
        "    aggfunc='count',\n",
        "    fill_value=0\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ReoFoTQgCyzB"
      },
      "source": [
        "### Monto total de fraudes por Día y Hora"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "pbmyGf9z-TzD",
        "outputId": "6b9c437a-134a-49da-92ed-fdba78147279"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(14, 8))\n",
        "sns.heatmap(pivot_monto, cmap=\"Reds\", linewidths=0.5, linecolor='gray')\n",
        "plt.title(\"Monto total de fraudes por Día y Hora\")\n",
        "plt.xlabel(\"Hora del día\")\n",
        "plt.ylabel(\"Día del mes\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5NyT7v0CC6YL"
      },
      "source": [
        "### Cantidad de fraudes por Día y Hora"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 647
        },
        "id": "cNEoUDrACrDj",
        "outputId": "654d5478-a90c-4989-944d-d93bc4f2efa2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABOUAAAMWCAYAAAC+/jK+AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAsdJJREFUeJzs3X2czPX+//HnrGWw7IoNWy7CEkK+Zzs5m9YSEcIWycU3F6ELRNRyNtXa4mwoRVrq0NrKRRHO1qlsSi4ihaSTsrmKcpVklYvR2s/vD1/zO9Pujhlm9z2f9bh/b5/b78zn/Zn35zkfn52ZXr/3e94Oy7IsAQAAAAAAACg2IaYDAAAAAAAAAJcbinIAAAAAAABAMaMoBwAAAAAAABQzinIAAAAAAABAMaMoBwAAAAAAABQzinIAAAAAAABAMaMoBwAAAAAAABQzinIAAAAAAABAMaMoBwAAAAAAABQzinIAAAC4aDt27ND48eO1fft201EAAABshaIcAADFpHXr1mrduvUFj/vkk0/kcDj0ySefBOzcAwYM0DXXXHPRz7/mmms0YMCAgOWRpClTpqhu3boqVaqUmjdvHtC+L8X48ePlcDhMx7AFy7I0cOBArVu3TvXr1zcdBwAAwFYoygEASqSdO3fq/vvvV926dVW2bFmFh4erZcuWmjZtmk6dOlVk5922bZvGjx+vPXv2FNk5SoKsrCyNGTNGLVu2VHp6uv7xj3+YjnTZu+aaa+RwOORwOBQSEqJKlSqpadOmuu+++7Rhw4YCn/PSSy9p165dmjdvnkJCzH6tvOaaa3T77bcX2Ha+0L148eJiTgUAAFC4UNMBAAAItH//+9+666675HQ61a9fPzVp0kRnzpzR2rVrlZiYqG+++UavvPJKkZx727ZtSklJUevWrfONTMvKyiqSc9rRxx9/rJCQEM2ZM0dlypQxHQf/p3nz5nrkkUckSb/99pu+/fZbLVq0SP/85z81atQoTZ061X3s3r179cQTTygzM1NXXnmlqcgAAAC2RVEOAFCi7N69W7169VLt2rX18ccfKyoqyt02bNgw7dixQ//+97+NZKP49P8dPnxY5cqVu+A1ycvL05kzZ1S2bNliSlZy5ebmKi8vz+s1v/rqq/W///u/HvsmTZqkPn366Pnnn1f9+vX14IMPSpJq1aqlX3/9tUgzB6sTJ04oLCzMdAwAAGBzTF8FAJQokydP1u+//645c+Z4FOTOi46O1siRI92P09PTdcstt6hq1apyOp1q3LixZs6cme9556fGrV27VjfeeKPKli2runXr6rXXXnMfM3fuXN11112SpDZt2rinAp7/bbiCflPuxx9/VEJCgsLCwlS1alWNGjVKLpcr3/nXrFmju+66S7Vq1ZLT6VTNmjU1atSoAqfiLlu2TE2aNFHZsmXVpEkTLV261KdrJ537jbAJEyaoRo0aKl++vNq0aaNvvvmmwGOPHTumhx9+WDVr1pTT6VR0dLQmTZqkvLw8r+dwOBxKT0/XiRMn3Ndo7ty57rbhw4dr3rx5uu666+R0OvXBBx9Ikp599lnddNNNqlKlisqVK6eYmJh80xH37Nnj0d+fzzt+/HiPfWvXrtVf//pXlS1bVvXq1dPLL79caO433nhDMTExKleunCpXrqxevXpp3759Hsd8//336t69u6pXr66yZcuqRo0a6tWrl3Jycrxek9atW6tJkybatGmTbrrpJpUrV0516tTRrFmz8h17+PBhDRo0SNWqVVPZsmV1/fXXKyMjo8Dr8Oyzz+qFF15QvXr15HQ6tW3bNq85ClKuXDm9/vrrqly5siZOnCjLstxtf76mP/zwg4YOHaprr71W5cqVU5UqVXTXXXddcDq3ZVm65ppr1K1bt3xtp0+fVkREhO6//36/s1/Il19+qY4dOyo8PFwVKlRQ27Zt9dlnn3kcM3fuXDkcDq1atUpDhw5V1apVVaNGDUkX/3oBAAAkRsoBAEqYd955R3Xr1tVNN93k0/EzZ87Uddddp65duyo0NFTvvPOOhg4dqry8PA0bNszj2B07dqhHjx4aNGiQ+vfvr1dffVUDBgxQTEyMrrvuOrVq1UojRozQ9OnT9dhjj6lRo0aS5P5//+zUqVNq27at9u7dqxEjRuiqq67S66+/ro8//jjfsYsWLdLJkyf14IMPqkqVKvr888/14osv6scff9SiRYvcx2VlZal79+5q3LixUlNT9csvv2jgwIHuIsKFPPnkk5owYYI6deqkTp06afPmzWrfvr3OnDnjcdzJkycVHx+vn376Sffff79q1aqldevWKSkpSQcOHNALL7xQ6Dlef/11vfLKK/r88881e/ZsSfL49/r444/11ltvafjw4YqMjHRPA542bZq6du2qvn376syZM1q4cKHuuusuvfvuu+rcubNPr++/ff3112rfvr2uvPJKjR8/Xrm5uUpOTla1atXyHTtx4kQ98cQT6tmzpwYPHqyff/5ZL774olq1aqUvv/xSlSpV0pkzZ9ShQwe5XC499NBDql69un766Se9++67OnbsmCIiIrzm+fXXX9WpUyf17NlTvXv31ltvvaUHH3xQZcqU0b333ivp3D3TunVr7dixQ8OHD1edOnW0aNEiDRgwQMeOHfMoOEvnis6nT5/WfffdJ6fTqcqVK/t9nSSpQoUKuuOOOzRnzhxt27ZN1113XYHHffHFF1q3bp169eqlGjVqaM+ePZo5c6Zat26tbdu2qXz58gU+z+Fw6H//9381efJkHT161CPnO++8o+PHj+cbwVeQP/74Q0eOHMm3v6Ci6DfffKO4uDiFh4drzJgxKl26tF5++WW1bt1aq1atUosWLTyOHzp0qK688ko9+eSTOnHixCW9XgAAAEmSBQBACZGTk2NJsrp16+bzc06ePJlvX4cOHay6det67Ktdu7YlyVq9erV73+HDhy2n02k98sgj7n2LFi2yJFkrV67M1298fLwVHx/vfvzCCy9Ykqy33nrLve/EiRNWdHR0vj4Kypmammo5HA7rhx9+cO9r3ry5FRUVZR07dsy9Lysry5Jk1a5du8Br8N+vp0yZMlbnzp2tvLw89/7HHnvMkmT179/fve/pp5+2wsLCrOzsbI8+/v73v1ulSpWy9u7d6/Vc/fv3t8LCwvLtl2SFhIRY33zzTb62P1+DM2fOWE2aNLFuueUW977du3dbkqz09PQC+05OTnY/TkhIsMqWLetx/bZt22aVKlXK+u+vSHv27LFKlSplTZw40aO/r7/+2goNDXXv//LLLy1J1qJFi7y+9oLEx8dbkqznnnvOvc/lclnNmze3qlatap05c8ayrP9/z7zxxhse1yE2NtaqUKGCdfz4cY/rEB4ebh0+fNinDLVr17Y6d+5caPvzzz9vSbL+9a9/uff9+ZoWdJ+uX7/ekmS99tprXs+/fft2S5I1c+ZMj/1du3a1rrnmGo97srD8krxu//1vk5CQYJUpU8bauXOne9/+/futihUrWq1atXLvS09PtyRZN998s5Wbm+txzkt5vQAAAExfBQCUGMePH5ckVaxY0efnlCtXzv2/c3JydOTIEcXHx2vXrl35Rtc0btxYcXFx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775bjRo1Ur9+/dSkSROdOXNG69at06JFizRgwABJUvv27VWmTBl16dJF999/v37//Xf985//VNWqVXXgwIGLOn/z5s1VqlQpTZo0STk5OXI6nbrllltUtWrVfMcOGTJEM2bMUL9+/bRp0yZFRUXp9ddfV/ny5T2Oa9iwoerVq6dHH31UP/30k8LDw/X2228X+Ft2qamp6ty5s26++Wbde++9Onr0qF588UVdd9117t8EK8yVV16pRx99VKmpqbr99tvVqVMnffnll3r//fcVGRnpcWxiYqIyMzN1++23a8CAAYqJidGJEyf09ddfa/HixdqzZ0++51yKzp07a+rUqbrtttvUp08fHT58WC+99JKio6O1detWj2MHDx6sZ555RoMHD9YNN9yg1atXu0ec/beUlBR98MEHiouL09ChQ93Freuuu86jz3r16mnChAlKSkrSnj17lJCQoIoVK2r37t1aunSp7rvvPj366KP6+OOPNXz4cN11111q0KCBcnNz9frrr6tUqVLq3r37BV/jVVddpUmTJmnPnj1q0KCB3nzzTW3ZskWvvPKK+3fr7rvvPr388ssaMGCANm3apGuuuUaLFy92jyjzZ5GTgvz000964403JJ0bHbdt2zYtWrRIBw8e1COPPOKxEEVBbr/9dr3++uuKiIhQ48aNtX79eq1YsUJVqlTxOUPnzp1VpUoVLVq0SB07dizwbycQJkyYoA8//FA333yzhg4dqtDQUL388styuVyaPHmyT30E4vUCAIDLmIEVXwEAKHLZ2dnWkCFDrGuuucYqU6aMVbFiRatly5bWiy++aJ0+fdp9XGZmptWsWTOrbNmy1jXXXGNNmjTJevXVVy1J1u7du93H1a5d2+rcuXO+88THx1vx8fEe+/75z39adevWtUqVKmVJslauXFnosT/88IPVtWtXq3z58lZkZKQ1cuRI64MPPvB4nmVZ1rZt26x27dpZFSpUsCIjI60hQ4ZYX331lSXJSk9P9+jz7bfftho1amQ5nU6rcePG1pIlS6z+/ftbtWvXvuB1O3v2rJWSkmJFRUVZ5cqVs1q3bm395z//sWrXrm3179/f49jffvvNSkpKsqKjo60yZcpYkZGR1k033WQ9++yz1pkzZ7yep3///lZYWFi+/ZKsYcOGFficOXPmWPXr17ecTqfVsGFDKz093UpOTrb+/HXm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f/58/etf/1LFihXdvxMXERGhcuXKKSIiQoMGDdLo0aNVuXJlhYeH66GHHlJsbKzPK69KF1GUa9KkibKzszVjxgxVrFhRv//+u+68804NGzZMUVFR/nYHAAAAAAAABI2ZM2dKklq3bu2xPz09XQMGDJAkPf/88woJCVH37t3lcrnUoUMHpaWl+XUev4ty0rnK4Lhx4y7mqQAAAAAAALgMhNhzoJx8WRO1bNmyeumll/TSSy9d9Hl8Kspt3brV5w6bNWvm87E//vijypYtq8jISEnSmjVrNGvWLO3du1e1a9fWsGHD/JqLCwAAAAAAANiBT0W55s2by+FwyLIsj/nA5yuH/73v7NmzPp+8e/fueuKJJ3T77bfrX//6l+68807dfvvtatmypbKzsxUfH68lS5bo9ttv97lPAAAAAAAAINj5VJTbvXu3+39/+eWXevTRR5WYmOgexbZ+/Xo999xzmjx5sl8n/+abb3TddddJklJTU/WPf/xDY8eOdbfPmDFDTz75JEU5AAAAAAAAm7Hr9NXi4lNRrnbt2u7/fdddd2n69Onq1KmTe1+zZs1Us2ZNPfHEE0pISPD95KGh+u233ySdK/x17NjRo71jx44eRToAAAAAAACgJAjx9wlff/216tSpk29/nTp1tG3bNr/6io+P14IFCyRJ//M//6NPPvnEo33lypW6+uqrvfbhcrl0/Phxjy03N9evHAAAAAAAAEBx8nv11UaNGik1NVWzZ89WmTJlJElnzpxRamqqGjVq5FdfzzzzjOLi4rR//37dfPPNGjdunL744gs1atRI27dv15tvvqlZs2Z57SM1NVUpKSke++Lj43XP8CT/XhgAAAAAAAAC5r/XIEB+fhflZs2apS5duqhGjRrulVa3bt0qh8Ohd955x6++GjVqpA0bNujxxx/X5MmTdeLECc2bN0+hoaH661//qoULF15wOmxSUpJGjx7tsW/KlCl+5QAAAAAAAACKk99FuRtvvFG7du3SvHnz9N1330mS7r77bvXp00dhYWF+B6hXr54WLFggy7J0+PBh5eXlKTIyUqVLl/bp+U6nU06n02NfaKjfLwsAAAAAAAAoNhdVvQoLC9N9990X0CAOh0PVqlXz2Ldv3z4lJyfr1VdfDei5AAAAAAAAULRYfdU7vxd6KE5Hjx5VRkaG6RgAAAAAAABAQBmd55mZmem1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zUhPcYrq7dWrl/XXv/7VTFAxXHkMd+vWzWrfvr17gopRVG/jxo2tF154wWGZp2xDftublpZmSbJ27dpVsCwvL88KCgqyZs6caaCwsN++vzh16pRVrlw56+OPPy74nj179liSrPXr15vKLODs/dCqVassSdbJkyfdH+aEK+/hPvroI8vX19e6dOmSG8uK5krvjh07LEnWDz/84MYy3IzYU64YFy9e1JYtW9ShQ4eCZWXKlFGHDh20fv16g2U3pl93aa5atarhEtfk5eVpzpw5OnfunFq1amU6x6nBgwfrvvvuc3gse6p9+/YpJCRE4eHh6tOnj7HDYVyxYMECtWjRQg8++KCqV6+uZs2aaebMmaazXHbx4kW9//77evTRR2Wz2UznFOmuu+7SypUrlZ6eLknasWOH1q5dq86dOxsuK9rly5eVl5dXaI+RChUqePRen5J08OBBHT161OF5IiAgQC1btmSbV4qys7Nls9lUpUoV0ynFunjxombMmKGAgABFR0ebzilSfn6+Hn74YSUkJKhx48amc1y2evVqVa9eXQ0bNtTAgQN14sQJ00lFys/P17///W81aNBAHTt2VPXq1dWyZUuP/riU/3bs2DH9+9//NrbHjivuuusuLViwQD/99JMsy9KqVauUnp6u2NhY02mF5ObmSpLDNq9MmTKy2+0es8377fuLLVu26NKlSw7buoiICIWGhnrEts7b3g9JrjVnZ2fL399fPj4+7spy2iJdvffcuXNKTU1VnTp19Ic//MGdabgJMZQrxvHjx5WXl6caNWo4LK9Ro4aOHj1qqOrGlJ+fr2HDhql169aKiooynePUzp07VblyZdntdj3xxBOaN2+eGjVqZDrrqubMmaOtW7cqJSXFdEqxWrZsWbCL+7Rp03Tw4EG1bdtWZ86cMZ1WpAMHDmjatGmqX7++li5dqoEDB+rJJ5/Uu+++azrNJfPnz9epU6fUr18/0ylX9f/+3//TQw89pIiICJUrV07NmjXTsGHD1KdPH9NpRfLz81OrVq304osv6siRI8rLy9P777+v9evXKzMz03SeU79u19jmuU9OTo5GjBihuLg4+fv7m865qi+++EKVK1dW+fLl9dprr2n58uUKDAw0nVWksWPHysfHR08++aTpFJd16tRJs2bN0sqVKzV27FitWbNGnTt39sjDprKysnT27FmNGTNGnTp10rJly9SjRw/95S9/0Zo1a0znFevdd9+Vn5+fsUMVXfHGG2+oUaNGqlWrlnx9fdWpUydNmTJF7dq1M51WyK/DrMTERJ08eVIXL17U2LFjdfjwYY/Y5hX1/uLo0aPy9fUt9A8hnrCt86b3Q79ypfn48eN68cUX9be//c3NdYU56506daoqV66sypUra/HixVq+fLl8fX0NleJmYX5MDfyvwYMHa9euXR7zr2rONGzYUNu3b1d2drY++eQT9e3bV2vWrPHIwdx//vMfDR06VMuXLzf2WS/X4r/3fmratKlatmypsLAwffTRRx75r9r5+flq0aKFXn75ZUlSs2bNtGvXLk2fPl19+/Y1XFe8t956S507d/aIz1y6mo8++kgffPCBPvzwQzVu3Fjbt2/XsGHDFBIS4rH38XvvvadHH31Ut956q8qWLavbb79dcXFx2rJli+k0eJBLly6pZ8+esixL06ZNM53j1D333KPt27fr+PHjmjlzpnr27KmNGzeqevXqptMcbNmyRRMnTtTWrVs9du/fojz00EMF/92kSRM1bdpUdevW1erVq3XvvfcaLCssPz9fktStWzcNHz5cknTbbbdp3bp1mj59umJiYkzmFevtt99Wnz59PPo10RtvvKENGzZowYIFCgsL01dffaXBgwcrJCTE4454KFeunD777DMNGDBAVatWVdmyZdWhQwd17tzZI07I5E3vLyTv65WKbz59+rTuu+8+NWrUSKNGjXJvXBGc9fbp00f/8z//o8zMTI0fP149e/bUN99849HPF/B+7ClXjMDAQJUtW7bQ2XiOHTummjVrGqq68QwZMkRffPGFVq1apVq1apnOKZavr6/q1aun5s2bKyUlRdHR0Zo4caLprCJt2bJFWVlZuv322+Xj4yMfHx+tWbNGkyZNko+Pj0f+K/x/q1Kliho0aKAffvjBdEqRgoODCw1jIyMjPfqQ218dOnRIK1as0GOPPWY6xamEhISCveWaNGmihx9+WMOHD/foPT/r1q2rNWvW6OzZs/rPf/6jTZs26dKlSwoPDzed5tSv2zW2eaXv14HcoUOHtHz5co/eS06SKlWqpHr16unOO+/UW2+9JR8fH7311lumswr5+uuvlZWVpdDQ0IJt3qFDh/TUU0+pdu3apvNcFh4ersDAQI/c9gUGBsrHx8crt31ff/210tLSPHq7d+HCBT377LOaMGGCunTpoqZNm2rIkCHq1auXxo8fbzqvSM2bN9f27dt16tQpZWZmasmSJTpx4oTxbd7V3l/UrFlTFy9eLHQGU9PbOm97PyQV33zmzBl16tRJfn5+mjdvnsqVK2eg8v8U1xsQEKD69eurXbt2+uSTT7R3717NmzfPQCluJgzliuHr66vmzZtr5cqVBcvy8/O1cuVKj/8MMW9gWZaGDBmiefPm6csvv1SdOnVMJ/0u+fn5BZ+p4Wnuvfde7dy5U9u3by+4tGjRQn369NH27dtVtmxZ04lOnT17Vvv371dwcLDplCK1bt260CnV09PTFRYWZqjIdampqapevbruu+8+0ylOnT9/XmXKOG6uypYtW7C3hierVKmSgoODdfLkSS1dulTdunUzneRUnTp1VLNmTYdt3unTp7Vx40a2eSXo14Hcvn37tGLFClWrVs100jXz1O3eww8/rO+++85hmxcSEqKEhAQtXbrUdJ7LDh8+rBMnTnjkts/X11d//OMfvXLb99Zbb6l58+Ye+3mI0pXnh0uXLnnldi8gIEBBQUHat2+fNm/ebGybV9z7i+bNm6tcuXIO27q0tDRlZGQY2dZ54/shV5pPnz6t2NhY+fr6asGCBUb3Nvs997FlWbIsyyO3dbixcPiqC+Lj49W3b1+1aNFCd9xxh15//XWdO3dO/fv3N51WpLNnzzr8y+rBgwe1fft2Va1aVaGhoQbLChs8eLA+/PBDff755/Lz8yv4HIeAgABVqFDBcF3REhMT1blzZ4WGhurMmTP68MMPtXr1ao99se/n51fo8xIqVaqkatWqeeRnVTz99NPq0qWLwsLCdOTIESUlJals2bKKi4sznVak4cOH66677tLLL7+snj17atOmTZoxY4ZmzJhhOs2p/Px8paamqm/fvh7xgbvOdOnSRaNHj1ZoaKgaN26sbdu2acKECXr00UdNp13V0qVLZVmWGjZsqB9++EEJCQmKiIjwiO1GcduIYcOG6aWXXlL9+vVVp04djRw5UiEhIerevbvHNv/yyy/KyMjQkSNHJKlgWFCzZk0jez046w0ODtYDDzygrVu36osvvlBeXl7Btq9q1apGPrvGWW+1atU0evRode3aVcHBwTp+/LimTJmin376SQ8++KDbW4vrDQ0NLTTkLFeunGrWrKmGDRu6O7WAs+aqVasqOTlZ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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(14, 8))\n",
        "sns.heatmap(pivot_cantidad, cmap=\"Blues\", linewidths=0.5, linecolor='gray')\n",
        "plt.title(\"Cantidad de fraudes por Día y Hora\")\n",
        "plt.xlabel(\"Hora del día\")\n",
        "plt.ylabel(\"Día del mes\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dBq8v0i0UhWy"
      },
      "source": [
        "# Vamos a analizar los usuarios más comprometidos en los fraudes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wC-J78WwEOlD",
        "outputId": "c107ddf4-4ed8-478c-b7f0-464c4bb0c77d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 10 de usuarios origen en fraudes: \n",
            " nameOrig\n",
            "C1280323807    1\n",
            "C1305486145    1\n",
            "C840083671     1\n",
            "C1420196421    1\n",
            "C2101527076    1\n",
            "C1039979813    1\n",
            "C2089752665    1\n",
            "C1614818636    1\n",
            "C40604503      1\n",
            "C1970706589    1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "\n",
            "Top 10 de destinos en fraudes: \n",
            " nameDest\n",
            "C1981613973    2\n",
            "C410033330     2\n",
            "C1366192319    2\n",
            "C1655359478    2\n",
            "C803116137     2\n",
            "C52390890      2\n",
            "C1325541393    2\n",
            "C904300960     2\n",
            "C2020337583    2\n",
            "C475338087     2\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Top 10 de usuarios origen en fraudes\n",
        "print('Top 10 de usuarios origen en fraudes: \\n',df_mod_col[df_mod_col['isFraud'] == 1]['nameOrig'].value_counts().head(10))\n",
        "\n",
        "# Top 10 de destinos en fraudes\n",
        "print('\\n\\nTop 10 de destinos en fraudes: \\n',df_mod_col[df_mod_col['isFraud'] == 1]['nameDest'].value_counts().head(10))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vmoL7o3bkWQ1"
      },
      "source": [
        "### Como observo que los usuarios origen(nameOrig) tienen una sola transaccion voy a revisar los montos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "gIFixpXRE-9E",
        "outputId": "3342e3c3-c705-4401-ef48-b70de5c3a232"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 10 usuarios origen en fraudes (cantidad y monto):\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             cantidad_fraudes  monto_total\n",
              "nameOrig                                  \n",
              "C99979309                   1   10000000.0\n",
              "C997532070                  1   10000000.0\n",
              "C1004068843                 1   10000000.0\n",
              "C1879989290                 1   10000000.0\n",
              "C576718894                  1   10000000.0\n",
              "C2062946234                 1   10000000.0\n",
              "C2064974440                 1   10000000.0\n",
              "C2065498878                 1   10000000.0\n",
              "C2068007279                 1   10000000.0\n",
              "C2070647495                 1   10000000.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b599575a-3757-419c-8836-150890ff179a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cantidad_fraudes</th>\n",
              "      <th>monto_total</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nameOrig</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C99979309</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C997532070</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C1004068843</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C1879989290</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C576718894</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C2062946234</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C2064974440</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C2065498878</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C2068007279</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C2070647495</th>\n",
              "      <td>1</td>\n",
              "      <td>10000000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b599575a-3757-419c-8836-150890ff179a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b599575a-3757-419c-8836-150890ff179a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b599575a-3757-419c-8836-150890ff179a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a07a672c-c8f3-4143-a1d9-c86f3b6eba11\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a07a672c-c8f3-4143-a1d9-c86f3b6eba11')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a07a672c-c8f3-4143-a1d9-c86f3b6eba11 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_origen",
              "summary": "{\n  \"name\": \"top_origen\",\n  \"rows\": 8213,\n  \"fields\": [\n    {\n      \"column\": \"nameOrig\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8213,\n        \"samples\": [\n          \"C225711699\",\n          \"C1577946828\",\n          \"C1042329949\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cantidad_fraudes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"monto_total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2404252.9472401673,\n        \"min\": 0.0,\n        \"max\": 10000000.0,\n        \"num_unique_values\": 3977,\n        \"samples\": [\n          3263443.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "# Usuario Origen\n",
        "top_origen = (\n",
        "    df_mod_col[df_mod_col['isFraud'] == 1]\n",
        "    .groupby('nameOrig')\n",
        "    .agg(\n",
        "        cantidad_fraudes=('isFraud', 'count'),\n",
        "        monto_total=('amount', 'sum')\n",
        "    )\n",
        "    .sort_values(by='monto_total', ascending=False)\n",
        "\n",
        ")\n",
        "\n",
        "print(\"Top 10 usuarios origen en fraudes (cantidad y monto):\\n\")\n",
        "top_origen.head(10)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "NBuIjRW2YnbI",
        "outputId": "99d2f7a4-7143-469d-c2fa-96e1ca07cc7b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count        8213.00\n",
              "mean      1467967.30\n",
              "std       2404252.95\n",
              "min             0.00\n",
              "25%        127091.33\n",
              "50%        441423.44\n",
              "75%       1517771.48\n",
              "max      10000000.00\n",
              "Name: amount, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>amount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8213.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1467967.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2404252.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>127091.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>441423.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1517771.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10000000.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "#Los montos minimos , maximos, promedios , cantidad, porcentajes de Fraudes\n",
        "df_only_fraude['amount'].describe().apply(lambda x:round(x,2))\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KwPufw3LKJKy"
      },
      "source": [
        "*****************************************************"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfSolo=df_mod_col.copy()"
      ],
      "metadata": {
        "id": "HQlVPahdOtnb"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfSolo['type'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e_Am2ToXPmgg",
        "outputId": "ff037540-ed60-470f-c8e3-be18a61d58a0"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['PAYMENT', 'TRANSFER', 'CASH_OUT', 'DEBIT', 'CASH_IN'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_filtro = dfSolo[dfSolo['type'].isin(['CASH_OUT', 'TRANSFER'])]\n",
        "\n",
        "df_filtro['type'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IONWu0GYOw5C",
        "outputId": "589a0790-ef3b-46db-9159-c6d7a15f45c3"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['TRANSFER', 'CASH_OUT'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfSolo['type'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mw0kUG5MQWMQ",
        "outputId": "cfa52320-8a43-4403-f072-5cac9cfacb68"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['PAYMENT', 'TRANSFER', 'CASH_OUT', 'DEBIT', 'CASH_IN'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfSolo.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L_avr1nCRD-M",
        "outputId": "e1542710-642b-4052-ef5c-70fe1b931043"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6362620, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Grafica por tipo y fraude\n",
        "sns.countplot(data=dfSolo, x='type', hue='isFraud')\n",
        "plt.title(\"Transacciones por tipo y si son fraude o no\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.ylim(0, 20000)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "b8QsR9P7RJHj",
        "outputId": "fdd6b0cf-8c4c-4588-83ad-68a4e1d2b9df"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfSolo[dfSolo['isFraud']==0][['type']].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "mAESThg4Sy44",
        "outputId": "cdf0432e-3182-4334-ad48-7206f7f72d63"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "type    \n",
              "CASH_OUT    2233384\n",
              "PAYMENT     2151495\n",
              "CASH_IN     1399284\n",
              "TRANSFER     528812\n",
              "DEBIT         41432\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>CASH_OUT</th>\n",
              "      <td>2233384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAYMENT</th>\n",
              "      <td>2151495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CASH_IN</th>\n",
              "      <td>1399284</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TRANSFER</th>\n",
              "      <td>528812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEBIT</th>\n",
              "      <td>41432</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfSolo[dfSolo['isFraud']==1][['type']].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "3bZAa82OUWUd",
        "outputId": "3a2b7c44-128c-4eac-cf84-ea4bbbeebfb0"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "type    \n",
              "CASH_OUT    4116\n",
              "TRANSFER    4097\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>CASH_OUT</th>\n",
              "      <td>4116</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TRANSFER</th>\n",
              "      <td>4097</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Se hace en una escala logaritmica para ver los graficos completos ya que la diferencia de los valores es muy alta\n",
        "sns.countplot(data=dfSolo, x='type', hue='isFraud')\n",
        "plt.title(\"Transacciones por tipo y si son fraude o no\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.yscale('log')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "kELq0Iq6UkiS",
        "outputId": "0c2b40f2-a2e4-4db7-eac0-edfb4516dadd"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "¿Querés detectar todos los fraudes? (alta Recall)\n",
        "\n",
        "¿O minimizar falsos positivos? (alta Precision)"
      ],
      "metadata": {
        "id": "fklWzcNjbCBV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_filtro['nameDest'].str.startswith('M').astype(int).value_counts()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "id": "o6GfWObgW_hu",
        "outputId": "74a3a69b-5d68-4132-95a1-612094dd2c24"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "nameDest\n",
              "0    2770409\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nameDest</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2770409</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Elimino los usuarios porque no tienen informacion relevante para el analisis por ahora"
      ],
      "metadata": {
        "id": "oWqySZ2Jni-O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_filtro = df_filtro.drop(columns=['nameOrig', 'nameDest'])\n"
      ],
      "metadata": {
        "id": "uY0p267lm17Y"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_filtro.head()"
      ],
      "metadata": {
        "id": "8bJ1pCoRn1cX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "0e716404-cf2f-4627-a305-67ab29f85998"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    step      type     amount  isFraud  isFlaggedFraud  dia  hora\n",
              "2      1  TRANSFER     181.00        1               0    0     1\n",
              "3      1  CASH_OUT     181.00        1               0    0     1\n",
              "15     1  CASH_OUT  229133.94        0               0    0     1\n",
              "19     1  TRANSFER  215310.30        0               0    0     1\n",
              "24     1  TRANSFER  311685.89        0               0    0     1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a8e8f09-d3df-4085-8e20-8193820b0b5f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <th>dia</th>\n",
              "      <th>hora</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>181.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>181.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>229133.94</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>215310.30</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>1</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>311685.89</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a8e8f09-d3df-4085-8e20-8193820b0b5f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8a8e8f09-d3df-4085-8e20-8193820b0b5f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8a8e8f09-d3df-4085-8e20-8193820b0b5f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-cf0dec97-ae6e-4bfd-905c-293f69c9434a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf0dec97-ae6e-4bfd-905c-293f69c9434a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-cf0dec97-ae6e-4bfd-905c-293f69c9434a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filtro"
            }
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "\n",
        "# --- 2. Inicializar el OneHotEncoder ---\n",
        "# 'handle_unknown='ignore'' es útil para manejar tipos que no se vieron durante el entrenamiento.\n",
        "# 'sparse_output=False' asegura que la salida sea un array denso de NumPy, fácil de trabajar.\n",
        "encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
        "\n",
        "# --- 3. Aplicar One-Hot Encoding a la columna 'type' ---\n",
        "# Usamos df[['type']] para seleccionar la columna como un DataFrame,\n",
        "# que es lo que espera el encoder.\n",
        "encoded_types = encoder.fit_transform(df_filtro[['type']])\n",
        "\n",
        "# El resultado de fit_transform es un array NumPy.\n",
        "# Podemos ver qué columnas se crearon:\n",
        "print(\"Columnas codificadas (nombres):\", encoder.get_feature_names_out(['type']))\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# --- 4. Crear un nuevo DataFrame con las columnas codificadas ---\n",
        "# Las columnas se llamarán 'type_CASH_OUT' y 'type_TRANSFER' (o similar)\n",
        "encoded_df = pd.DataFrame(encoded_types, columns=encoder.get_feature_names_out(['type']))\n",
        "encoded_df = encoded_df.astype(int)\n",
        "# --- 5. Unir las nuevas columnas al DataFrame original y eliminar la columna 'type' original ---\n",
        "# Usamos .reset_index(drop=True) para asegurarnos de que los índices coincidan correctamente\n",
        "df_final = pd.concat([df_filtro.reset_index(drop=True), encoded_df], axis=1)\n",
        "df_final = df_final.drop('type', axis=1) # Eliminar la columna 'type' original\n",
        "\n",
        "print(\"DataFrame después de One-Hot Encoding:\\n\", df_final)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uThGQ_GfxKmV",
        "outputId": "6dfc1078-9320-4c58-9ac7-7ac5f007fdd5"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Columnas codificadas (nombres): ['type_CASH_OUT' 'type_TRANSFER']\n",
            "------------------------------\n",
            "DataFrame después de One-Hot Encoding:\n",
            "          step      amount  isFraud  isFlaggedFraud  dia  hora  type_CASH_OUT  \\\n",
            "0           1      181.00        1               0    0     1              0   \n",
            "1           1      181.00        1               0    0     1              1   \n",
            "2           1   229133.94        0               0    0     1              1   \n",
            "3           1   215310.30        0               0    0     1              0   \n",
            "4           1   311685.89        0               0    0     1              0   \n",
            "...       ...         ...      ...             ...  ...   ...            ...   \n",
            "2770404   743   339682.13        1               0   31    23              1   \n",
            "2770405   743  6311409.28        1               0   31    23              0   \n",
            "2770406   743  6311409.28        1               0   31    23              1   \n",
            "2770407   743   850002.52        1               0   31    23              0   \n",
            "2770408   743   850002.52        1               0   31    23              1   \n",
            "\n",
            "         type_TRANSFER  \n",
            "0                    1  \n",
            "1                    0  \n",
            "2                    0  \n",
            "3                    1  \n",
            "4                    1  \n",
            "...                ...  \n",
            "2770404              0  \n",
            "2770405              1  \n",
            "2770406              0  \n",
            "2770407              1  \n",
            "2770408              0  \n",
            "\n",
            "[2770409 rows x 8 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "tA7uQ3fnAH__",
        "outputId": "6207ca64-f327-4299-bf9c-63f195479ca9"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   step     amount  isFraud  isFlaggedFraud  dia  hora  type_CASH_OUT  \\\n",
              "0     1     181.00        1               0    0     1              0   \n",
              "1     1     181.00        1               0    0     1              1   \n",
              "2     1  229133.94        0               0    0     1              1   \n",
              "3     1  215310.30        0               0    0     1              0   \n",
              "4     1  311685.89        0               0    0     1              0   \n",
              "\n",
              "   type_TRANSFER  \n",
              "0              1  \n",
              "1              0  \n",
              "2              0  \n",
              "3              1  \n",
              "4              1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0745d78-bc14-43ec-b7dd-bb4b843b007e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>amount</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <th>dia</th>\n",
              "      <th>hora</th>\n",
              "      <th>type_CASH_OUT</th>\n",
              "      <th>type_TRANSFER</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>181.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>181.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>229133.94</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>215310.30</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>311685.89</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0745d78-bc14-43ec-b7dd-bb4b843b007e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f0745d78-bc14-43ec-b7dd-bb4b843b007e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f0745d78-bc14-43ec-b7dd-bb4b843b007e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ac5c08d4-53e7-4693-b517-7bb38d06adc4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac5c08d4-53e7-4693-b517-7bb38d06adc4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ac5c08d4-53e7-4693-b517-7bb38d06adc4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_final"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "HwbSX_WA-ZOU"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix"
      ],
      "metadata": {
        "id": "1uUla3HwBrUP"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.utils import resample"
      ],
      "metadata": {
        "id": "oJ6CZYDoBb-I"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_final.drop(columns=['isFraud'])\n",
        "y = df_final['isFraud']\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.3, random_state=42, stratify=y\n",
        ")"
      ],
      "metadata": {
        "id": "yZ_TwO3pAbqB"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Dividimos\n",
        "df_fraude = df_final[df_final.isFraud == 1]\n",
        "df_no_fraude = df_final[df_final.isFraud == 0]\n",
        "\n"
      ],
      "metadata": {
        "id": "1REsciqh9Mr4"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_final.drop(columns=['isFraud'])\n",
        "y = df_final['isFraud']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.3, random_state=42, stratify=y\n",
        ")\n"
      ],
      "metadata": {
        "id": "Cf6Y1YLx_Er2"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Random Forest\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, confusion_matrix"
      ],
      "metadata": {
        "id": "_wU54UbP-sSe"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "modelo = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "modelo.fit(X_train, y_train)\n",
        "y_pred = modelo.predict(X_test)\n",
        "\n",
        "# Evaluación\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "print(classification_report(y_test, y_pred, digits=4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0g29ICFM-yOE",
        "outputId": "6d447d85-8418-4efa-c4f0-fe0545235d36"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[828632     27]\n",
            " [    37   2427]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0     1.0000    1.0000    1.0000    828659\n",
            "           1     0.9890    0.9850    0.9870      2464\n",
            "\n",
            "    accuracy                         0.9999    831123\n",
            "   macro avg     0.9945    0.9925    0.9935    831123\n",
            "weighted avg     0.9999    0.9999    0.9999    831123\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Para la importancia de features\n",
        "# Obtener nombres de columnas\n",
        "features = X_train.columns\n",
        "\n",
        "# Importancia de cada feature\n",
        "importancias = modelo.feature_importances_\n",
        "\n",
        "# Armar dataframe ordenado\n",
        "df_importancias = pd.DataFrame({\n",
        "    'feature': features,\n",
        "    'importance': importancias\n",
        "}).sort_values(by='importance', ascending=False)\n",
        "\n",
        "# Visualizar\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(data=df_importancias, x='importance', y='feature', palette='viridis')\n",
        "plt.title('Importancia de features - Random Forest')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 717
        },
        "id": "Wk-kFiC6EAKr",
        "outputId": "eba117bd-a20f-4395-f63d-986725194f82"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-92-1707133926>:16: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(data=df_importancias, x='importance', y='feature', palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "metadata": {
        "id": "YH-lYFVzISRo"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor"
      ],
      "metadata": {
        "id": "dLPtgBxhJG14"
      },
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Inicializo el modelo\n",
        "regresor = RandomForestRegressor(criterion='absolute_error', random_state=42)"
      ],
      "metadata": {
        "id": "HGDqW-kWJVsI"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Valores para los parametros a optimizar\n",
        "param_grid_rf = {\n",
        "    'criterion': ['absolute_error'],\n",
        "    'n_estimators': [70, 80, 90, 100, 120],\n",
        "    'max_features': ['log2','sqrt'],\n",
        "    'max_depth': [1, 3, 5, 10, 20, 50],\n",
        "    'min_samples_leaf': [1, 3, 5, 10, 20, 50]\n",
        "}\n"
      ],
      "metadata": {
        "id": "GQZPLNqPITRS"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Inicializamos un modelo\n",
        "grid_regresor = RandomForestRegressor(random_state=42)"
      ],
      "metadata": {
        "id": "01DiO80HI-DB"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# This is important for the feature_importance function later\n",
        "lista_atributos = [col for col in range(X_train.shape[1])]"
      ],
      "metadata": {
        "id": "Kj1JVce_KTzZ"
      },
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Para la importancia de features\n",
        "# Obtener nombres de columnas\n",
        "features = X_train.columns\n",
        "\n",
        "# Importancia de cada feature\n",
        "importancias = modelo.feature_importances_\n",
        "\n",
        "# Armar dataframe ordenado\n",
        "df_importancias = pd.DataFrame({\n",
        "    'feature': features,\n",
        "    'importance': importancias\n",
        "}).sort_values(by='importance', ascending=False)"
      ],
      "metadata": {
        "id": "koXu7mrAKI1O"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Para la importancia de features\n",
        "# Obtener nombres de columnas\n",
        "features = X_train.columns\n",
        "\n",
        "# Importancia de cada feature\n",
        "importancias = modelo.feature_importances_\n",
        "\n",
        "# Armar dataframe ordenado\n",
        "df_importancias = pd.DataFrame({\n",
        "    'feature': features,\n",
        "    'importance': importancias\n",
        "}).sort_values(by='importance', ascending=False)\n",
        "\n",
        "# Iterar a través del DataFrame df_importancias para imprimir los atributos y sus importancias\n",
        "for index, row in df_importancias.iterrows():\n",
        "    print(f'Atributo: {row[\"feature\"]}, Importancia: {row[\"importance\"]:.4f}')\n",
        "\n",
        " # Visualizar\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(data=df_importancias, x='importance', y='feature', palette='viridis')\n",
        "plt.title('Importancia de features - Random Forest')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 844
        },
        "id": "tklhbZxbKx8w",
        "outputId": "af8b9d50-ae3f-4fa4-8f95-deb11cd49e61"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Atributo: dia, Importancia: 0.8816\n",
            "Atributo: amount, Importancia: 0.0431\n",
            "Atributo: step, Importancia: 0.0297\n",
            "Atributo: hora, Importancia: 0.0239\n",
            "Atributo: type_TRANSFER, Importancia: 0.0136\n",
            "Atributo: type_CASH_OUT, Importancia: 0.0079\n",
            "Atributo: isFlaggedFraud, Importancia: 0.0002\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-115-1635380225>:20: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(data=df_importancias, x='importance', y='feature', palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, confusion_matrix"
      ],
      "metadata": {
        "id": "qjRacv3MMzIW"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Inicializa el modelo K-NN. Puedes ajustar el número de vecinos (n_neighbors)\n",
        "knn = KNeighborsClassifier(n_neighbors=7) # Por ejemplo, usamos 5 vecinos\n",
        "\n",
        "# Entrena el modelo con tus datos de entrenamiento\n",
        "knn.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "qLH_W_inNPOZ",
        "outputId": "8dbd8b4c-c756-4cdb-e630-bf2486f87c09"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=7)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(n_neighbors=7)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Realiza predicciones en tus datos de prueba\n",
        "y_pred_knn = knn.predict(X_test)"
      ],
      "metadata": {
        "id": "_V--PaYnOCOS"
      },
      "execution_count": 132,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Imprime la matriz de confusión para ver el rendimiento del modelo\n",
        "print(\"Matriz de Confusión:\")\n",
        "print(confusion_matrix(y_test, y_pred_knn))\n",
        "\n",
        "# Imprime un informe de clasificación para métricas como precisión, recall y F1-score\n",
        "print(\"\\nInforme de Clasificación:\")\n",
        "print(classification_report(y_test, y_pred_knn))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hKNJ0MuBOHw7",
        "outputId": "db51731f-36e2-49b7-8678-fd17c09cdadc"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz de Confusión:\n",
            "[[828608     51]\n",
            " [  2369     95]]\n",
            "\n",
            "Informe de Clasificación:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00    828659\n",
            "           1       0.65      0.04      0.07      2464\n",
            "\n",
            "    accuracy                           1.00    831123\n",
            "   macro avg       0.82      0.52      0.54    831123\n",
            "weighted avg       1.00      1.00      1.00    831123\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Usamos sns.heatmap() para generar el mapa de calor:\n",
        "cm: La matriz de confusión que calculamos.\n",
        "annot=True: Muestra los valores numéricos en cada celda.\n",
        "fmt='d': Formatea los números como enteros.\n",
        "cmap='Blues': Define el esquema de color del mapa de calor.\n",
        "cbar=False: Oculta la barra de color.\n",
        "xticklabels y yticklabels: Establecen las etiquetas de los ejes x e y para mayor claridad.\n"
      ],
      "metadata": {
        "id": "OYw8S-NmPOfT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcula la matriz de confusión\n",
        "cm = confusion_matrix(y_test, y_pred_knn)\n",
        "\n",
        "# Crea un mapa de calor de la matriz de confusión\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
        "            xticklabels=['No Fraude', 'Fraude'], yticklabels=['No Fraude', 'Fraude'])\n",
        "plt.xlabel('Predicción')\n",
        "plt.ylabel('Valor Real')\n",
        "plt.title('Matriz de Confusión K-NN')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Yf8Rc4JuPJ6B",
        "outputId": "9470783a-8a89-4a60-ecd4-27ccfab37340"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier\n",
        "\n",
        "# Crear el modelo\n",
        "model = XGBClassifier()\n",
        "\n",
        "# Entrenar\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predecir\n",
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "-ABh3d2AWScQ"
      },
      "execution_count": 135,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, y_pred))\n",
        "print(classification_report(y_test, y_pred, digits=4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wrN4Pjg9XlL8",
        "outputId": "e9be6fb2-a0d5-41ea-954c-6bb0c837913d"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[828651      8]\n",
            " [    37   2427]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0     1.0000    1.0000    1.0000    828659\n",
            "           1     0.9967    0.9850    0.9908      2464\n",
            "\n",
            "    accuracy                         0.9999    831123\n",
            "   macro avg     0.9983    0.9925    0.9954    831123\n",
            "weighted avg     0.9999    0.9999    0.9999    831123\n",
            "\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}