{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Flor-Si/Trabajos/blob/main/TP%205-N5_Curso.ipynb%20(Para%20Entregar)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gp2WddtV9IwG"
      },
      "source": [
        "# Programa Ingenias+ Data Science"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X03mviQS9IyL"
      },
      "source": [
        "# Ejercicios\n",
        "\n",
        "1. Crear un arreglo de ceros de longitud 12\n",
        "2. Crear un arreglo de longitud 10 con ceros en todas sus posiciones y un 10 en la posición número 5\n",
        "3. Crear un arreglo que tenga los números del 10 al 49\n",
        "4. Crear una arreglo 2d de shape (3, 3) que tenga los números del 0 al 8\n",
        "5. Crear un arreglo de números aleatorios de longitud 100 y obtener su media y varianza\n",
        "6. Calcular la media de un arreglo usando np.sum\n",
        "7. Calcular la varianza de un arreglo usando np.sum y np.mean\n",
        "8. Crear un array de números aleatorios usando np.random.randn.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Importar numpy\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "_Ml6ucHAe0dr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Ejercicio1"
      ],
      "metadata": {
        "id": "tawXg7-plFxr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array_ceros=np.zeros(12)\n",
        "print(array_ceros)\n",
        "len (array_ceros)"
      ],
      "metadata": {
        "id": "bDHUnDG-e0TB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "080577a6-c49a-438f-a2ba-a4174f8b8dcf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio2"
      ],
      "metadata": {
        "id": "YmS9vXOolJYx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array_diez=np.zeros(10)\n",
        "array_diez[5]=10\n",
        "print(array_diez)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d0bEPMKDf-_l",
        "outputId": "6be4c97a-6f4b-4907-eb33-2afe4bccbb4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0.  0.  0.  0. 10.  0.  0.  0.  0.  0.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio3"
      ],
      "metadata": {
        "id": "5YVH9cE3lMAQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array_10_49=np.arange(10,50)\n",
        "print(array_10_49)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M3TJDCz1g-i7",
        "outputId": "f1d35ddf-f197-4f10-aa9d-f587627a180f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n",
            " 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio4"
      ],
      "metadata": {
        "id": "aJf_LVH9lO95"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array_8_10=np.arange(9).reshape(3,3)\n",
        "print(array_8_10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IWBKX2tKguGs",
        "outputId": "a99018b8-9195-4f43-a76d-cb35daef42d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 2]\n",
            " [3 4 5]\n",
            " [6 7 8]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio5"
      ],
      "metadata": {
        "id": "pS85BvhLlVYo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array_100=np.random.rand(100)\n",
        "print(array_100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N8mMKTPGf_Vu",
        "outputId": "f7129e8c-e125-49a6-84ae-aa4059f7700b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.69272505 0.85275235 0.05355489 0.74700151 0.82704312 0.82975083\n",
            " 0.32597014 0.73802304 0.8427023  0.37981722 0.89970385 0.93678725\n",
            " 0.92131762 0.64875884 0.66187145 0.57852022 0.54093207 0.23251251\n",
            " 0.50695466 0.17520443 0.14024208 0.83432989 0.90151228 0.49630382\n",
            " 0.14473452 0.14192465 0.74061421 0.55261284 0.94877208 0.7933555\n",
            " 0.55268714 0.11876048 0.5172032  0.35034303 0.61876077 0.40992409\n",
            " 0.02902472 0.19394195 0.62000806 0.90691577 0.75072183 0.51084614\n",
            " 0.75122444 0.52400035 0.95579684 0.57902413 0.57509582 0.39081144\n",
            " 0.23095984 0.82365407 0.12258414 0.67548248 0.34448617 0.83302321\n",
            " 0.83066036 0.68200323 0.31291215 0.84544136 0.48885916 0.68841567\n",
            " 0.89221525 0.41951108 0.67843896 0.35683834 0.83401045 0.15368538\n",
            " 0.61206059 0.47764874 0.40539245 0.43138272 0.78868197 0.32151228\n",
            " 0.51785581 0.74612109 0.019606   0.45758274 0.44047443 0.58834572\n",
            " 0.07447584 0.85743339 0.2509582  0.81923731 0.1774599  0.5026379\n",
            " 0.86283754 0.02885228 0.27995142 0.18092035 0.76421126 0.53357348\n",
            " 0.6784271  0.24991564 0.44906166 0.27427325 0.10548619 0.08677834\n",
            " 0.5282165  0.02583598 0.74883209 0.4182707 ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array_media=np.mean(array_100)\n",
        "print(array_media)\n",
        "array_varianza=np.var(array_100)\n",
        "print(array_varianza)"
      ],
      "metadata": {
        "id": "Cly9U6BDez8E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0d126406-8e8f-4cc8-f0b6-00cc157b6e72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5235888762149798\n",
            "0.0724270068486509\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio6"
      ],
      "metadata": {
        "id": "nSVN0GB6lmcl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array_100_sum=np.sum(array_100)/[len(array_100)]\n",
        "print(array_100_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wjIj6NHvitDW",
        "outputId": "aa3dc6a8-ee57-4614-f6c1-c9390eb91eae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.52358888]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 7"
      ],
      "metadata": {
        "id": "rprrFZZElZ7e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array_100_varianza=np.sum((array_100-np.mean(array_100))**2)/[len(array_100)]\n",
        "print(array_100_varianza)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Zdj3AxHlvu7",
        "outputId": "99ff3c1e-e0f4-4044-d34c-bc26a9c37b21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.07242701]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Ejercicio8\n",
        "#Crear un array de números aleatorios usando np.random.randn."
      ],
      "metadata": {
        "id": "KfQNeLQJl6J5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Crear un array de números aleatorios usando np.random.randn.\n",
        "array_aletorio=np.random.rand(5)\n",
        "print(array_aletorio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ojJh0uwgl97i",
        "outputId": "14b28a5d-c12c-406d-aa40-c3d0e57a2bbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.80732465 0.16970893 0.64437967 0.40109301 0.92023724]\n"
          ]
        }
      ]
    }
  ]
}